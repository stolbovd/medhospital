<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:ctx="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <axon:annotation-config/>
    <ctx:component-scan base-package="ua.com.alus.medhosp.backend"/>
    <axon:event-bus id="eventBus"/>
    <axon:jpa-event-store id="eventStore"/>
    <axon:command-bus id="commandBus">
        <axon:interceptors>
            <bean class="org.axonframework.commandhandling.interceptors.SpringTransactionalInterceptor">
                <property name="transactionManager" ref="transactionManager"/>
            </bean>
        </axon:interceptors>
    </axon:command-bus>

    <!-- Patient axon config -->
    <axon:event-sourcing-repository id="patientRepository"
                                    aggregate-type="ua.com.alus.medhosp.backend.axon.api.patient.PatientAggregate"/>

    <bean id="patientCommandHandler"
          class="ua.com.alus.medhosp.backend.axon.api.patient.handlers.PatientCommandHandler">
        <property name="repository" ref="patientRepository"/>
    </bean>
    <bean id="patientEventHandler" class="ua.com.alus.medhosp.backend.axon.api.patient.handlers.PatientEventHandler">
        <property name="patientService" ref="patientService"/>
    </bean>

    <!--############################ AttributeValue axon config #######################################-->

    <bean id="attribValueSnapshotter" class="org.axonframework.eventsourcing.SpringAggregateSnapshotter">
        <property name="eventStore" ref="eventStore"/>
        <property name="executor" ref="attribValueTaskExecutor"/>
        <property name="aggregateFactories">
            <list>
                <bean class="ua.com.alus.medhosp.backend.axon.api.patient.snapshot.AttributeValueAggregateFactory"/>
            </list>
        </property>
    </bean>

    <bean id="attribValueTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2"/>
        <property name="maxPoolSize" value="5"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>
    <bean id="attributeValueSnapshotterTriger" class="org.axonframework.eventsourcing.EventCountSnapshotterTrigger">
        <property name="snapshotter" ref="attribValueSnapshotter"/>
        <property name="trigger" value="50"/>
    </bean>

    <!--This repository deserialize values from DomainEvent into AggregateRoot - that values that cannot be changed and when aggregate root
 is loaded from repository-->
    <bean id="patientAttributeValueEvSource"
          class="ua.com.alus.medhosp.backend.axon.api.patient.eventsource.PatientAttributeValueEventSource">
        <property name="snapshotterTrigger" ref="attributeValueSnapshotterTriger"/>
    </bean>

    <bean id="attributeValueCommandHandler"
          class="ua.com.alus.medhosp.backend.axon.api.patient.handlers.AttributeValueCommandHandler">
        <property name="repository" ref="patientAttributeValueEvSource"/>
    </bean>

    <bean id="attributeValueEventHandler"
          class="ua.com.alus.medhosp.backend.axon.api.patient.handlers.AttributeValueEventHandler">
        <property name="patientService" ref="patientService"/>
    </bean>
    <!--############################## End of AttributeValue axon config ######################-->


    <!--############################## Attribute axon config ############################-->


    <bean id="attributeSnapshotter" class="org.axonframework.eventsourcing.SpringAggregateSnapshotter">
        <property name="eventStore" ref="eventStore"/>
        <property name="executor" ref="attribValueTaskExecutor"/>
        <property name="aggregateFactories">
            <list>
                <bean class="ua.com.alus.medhosp.backend.axon.api.patient.snapshot.AttributeAggregateFactory"/>
            </list>
        </property>
    </bean>

    <bean id="attribTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2"/>
        <property name="maxPoolSize" value="5"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>

    <bean id="attributeSnapshotterTriger" class="org.axonframework.eventsourcing.EventCountSnapshotterTrigger">
        <property name="snapshotter" ref="attributeSnapshotter"/>
        <property name="trigger" value="50"/>
    </bean>
    <bean id="patientAttributeEvSource"
          class="ua.com.alus.medhosp.backend.axon.api.patient.eventsource.PatientAttributeEventSource">
        <property name="snapshotterTrigger" ref="attributeSnapshotterTriger"/>
    </bean>

    <bean id="attributeCommandHandler"
          class="ua.com.alus.medhosp.backend.axon.api.patient.handlers.AttributeCommandHandler">
        <property name="repository" ref="patientAttributeEvSource"/>
    </bean>

    <bean id="attributeEventHandler"
          class="ua.com.alus.medhosp.backend.axon.api.patient.handlers.AttributeEventHandler">
        <property name="patientService" ref="patientService"/>
    </bean>

    <!--############################## Message axon config ############################-->

    <axon:event-sourcing-repository id="messageRepository"
                                    aggregate-type="ua.com.alus.medhosp.backend.axon.api.message.MessageAggregate"/>
    <!--Handler of commands from client app -->
    <bean id="messageCommandHandler"
          class="ua.com.alus.medhosp.backend.axon.api.message.handlers.MessageCommandHandler">
        <property name="repository" ref="messageRepository"/>
    </bean>

    <bean id="messageEventHandler" class="ua.com.alus.medhosp.backend.axon.api.message.handlers.MessageEventHandler">
        <property name="messageService" ref="messageService"/>
        <property name="jmsEventProducer" ref="jmsEventProducer"/>
    </bean>

    <!--############################## End of Message axon config ############################-->

    <!--############################ End of Attribute axon config #######################-->

    <bean id="commandProcessor" class="ua.com.alus.medhosp.backend.processor.CommandProcessorImpl">
        <property name="commandBus" ref="commandBus"/>
        <property name="command2Class">
            <map>
                <entry key="#{T(ua.com.alus.medhosp.prototype.commands.Command).SAVE_PATIENT.getCommandName()}"
                       value="ua.com.alus.medhosp.backend.axon.api.patient.command.SavePatientCommand"/>
                <entry key="#{T(ua.com.alus.medhosp.prototype.commands.Command).SAVE_ATTRIBUTE_VALUE.getCommandName()}"
                       value="ua.com.alus.medhosp.backend.axon.api.patient.command.SaveAttributeValueCommand"/>
                <entry key="#{T(ua.com.alus.medhosp.prototype.commands.Command).SAVE_ATTRIBUTE.getCommandName()}"
                       value="ua.com.alus.medhosp.backend.axon.api.patient.command.SaveAttributeCommand"/>
                <entry key="#{T(ua.com.alus.medhosp.prototype.commands.Command).REMOVE_PATIENT.getCommandName()}"
                       value="ua.com.alus.medhosp.backend.axon.api.patient.command.RemovePatientCommand"/>
                <entry key="#{T(ua.com.alus.medhosp.prototype.commands.Command).REMOVE_ATTRIBUTE_VALUE.getCommandName()}"
                       value="ua.com.alus.medhosp.backend.axon.api.patient.command.RemoveAttributeValueCommand"/>
                <entry key="#{T(ua.com.alus.medhosp.prototype.commands.Command).RESEND_MESSAGE.getCommandName()}"
                       value="ua.com.alus.medhosp.backend.axon.api.message.command.ReSendMessageCommand"/>
            </map>
        </property>
    </bean>

</beans>